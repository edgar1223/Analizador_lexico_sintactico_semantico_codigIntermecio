
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 27 13:37:45 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 27 13:37:45 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\006\000\002\002" +
    "\007\000\002\002\007\000\002\002\010\000\002\015\012" +
    "\000\002\015\010\000\002\015\011\000\002\015\011\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\005\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\020\002\000\002\004\011\000\002\004\007\000\002" +
    "\021\002\000\002\004\010\000\002\022\002\000\002\004" +
    "\006\000\002\023\002\000\002\004\007\000\002\004\006" +
    "\000\002\004\006\000\002\024\002\000\002\004\012\000" +
    "\002\025\002\000\002\004\012\000\002\026\002\000\002" +
    "\004\012\000\002\027\002\000\002\004\011\000\002\030" +
    "\002\000\002\004\006\000\002\004\010\000\002\031\002" +
    "\000\002\004\011\000\002\004\011\000\002\004\011\000" +
    "\002\032\002\000\002\004\010\000\002\033\002\000\002" +
    "\004\007\000\002\034\002\000\002\004\006\000\002\006" +
    "\011\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\013\003\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\006\000\002" +
    "\013\007\000\002\007\015\000\002\010\011\000\002\011" +
    "\013\000\002\012\011\000\002\014\012\000\002\014\011" +
    "\000\002\005\005\000\002\005\004\000\002\005\004\000" +
    "\002\035\002\000\002\017\010\000\002\036\002\000\002" +
    "\017\010\000\002\037\002\000\002\017\010\000\002\040" +
    "\002\000\002\017\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\006\021\004\022\005\001\002\000\004\045" +
    "\322\001\002\000\004\021\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\045\011\001" +
    "\002\000\004\040\012\001\002\000\010\022\016\023\014" +
    "\041\013\001\002\000\004\002\uffff\001\002\000\004\045" +
    "\313\001\002\000\004\041\312\001\002\000\004\023\017" +
    "\001\002\000\004\045\020\001\002\000\004\036\021\001" +
    "\002\000\004\037\022\001\002\000\004\040\023\001\002" +
    "\000\026\006\036\007\025\011\033\012\032\013\027\016" +
    "\026\017\042\041\040\045\043\054\041\001\002\000\030" +
    "\006\ufff1\007\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\041\ufff1\045\ufff1\054\ufff1\001\002\000\004" +
    "\045\301\001\002\000\004\036\273\001\002\000\004\036" +
    "\261\001\002\000\030\006\uffee\007\uffee\011\uffee\012\uffee" +
    "\013\uffee\015\uffee\016\uffee\017\uffee\041\uffee\045\uffee\054" +
    "\uffee\001\002\000\030\006\ufff7\007\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\015\ufff7\016\ufff7\017\ufff7\041\ufff7\045\ufff7\054" +
    "\ufff7\001\002\000\004\045\241\001\002\000\004\045\232" +
    "\001\002\000\030\006\ufff3\007\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\015\ufff3\016\ufff3\017\ufff3\041\ufff3\045\ufff3\054\ufff3" +
    "\001\002\000\030\006\ufff5\007\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\041\ufff5\045\ufff5\054\ufff5" +
    "\001\002\000\006\034\202\045\203\001\002\000\030\006" +
    "\036\007\025\011\033\012\032\013\027\015\144\016\026" +
    "\017\042\041\201\045\043\054\041\001\002\000\004\041" +
    "\ufff9\001\002\000\006\036\160\053\157\001\002\000\004" +
    "\036\071\001\002\000\004\024\045\001\002\000\030\006" +
    "\uffec\007\uffec\011\uffec\012\uffec\013\uffec\015\uffec\016\uffec" +
    "\017\uffec\041\uffec\045\uffec\054\uffec\001\002\000\010\045" +
    "\050\046\046\047\047\001\002\000\006\010\064\044\uffe4" +
    "\001\002\000\004\044\uffcf\001\002\000\012\025\053\026" +
    "\052\027\055\030\051\001\002\000\006\045\uffc7\046\uffc7" +
    "\001\002\000\006\045\uffc9\046\uffc9\001\002\000\006\045" +
    "\uffca\046\uffca\001\002\000\004\045\056\001\002\000\006" +
    "\045\uffc8\046\uffc8\001\002\000\004\044\uffeb\001\002\000" +
    "\004\044\060\001\002\000\030\006\uffea\007\uffea\011\uffea" +
    "\012\uffea\013\uffea\015\uffea\016\uffea\017\uffea\041\uffea\045" +
    "\uffea\054\uffea\001\002\000\004\044\062\001\002\000\030" +
    "\006\uffce\007\uffce\011\uffce\012\uffce\013\uffce\015\uffce\016" +
    "\uffce\017\uffce\041\uffce\045\uffce\054\uffce\001\002\000\004" +
    "\044\070\001\002\000\004\046\065\001\002\000\004\044" +
    "\uffda\001\002\000\004\044\067\001\002\000\030\006\uffd9" +
    "\007\uffd9\011\uffd9\012\uffd9\013\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\041\uffd9\045\uffd9\054\uffd9\001\002\000\030\006\uffe3" +
    "\007\uffe3\011\uffe3\012\uffe3\013\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\041\uffe3\045\uffe3\054\uffe3\001\002\000\006\006\074" +
    "\045\073\001\002\000\004\037\132\001\002\000\004\024" +
    "\124\001\002\000\004\045\075\001\002\000\004\024\076" +
    "\001\002\000\004\046\077\001\002\000\004\044\100\001" +
    "\002\000\006\035\102\045\103\001\002\000\004\044\114" +
    "\001\002\000\006\037\uffc6\044\uffc6\001\002\000\004\032" +
    "\104\001\002\000\012\005\106\035\107\045\110\046\105" +
    "\001\002\000\006\037\uffc4\044\uffc4\001\002\000\006\005" +
    "\111\045\112\001\002\000\006\037\uffc5\044\uffc5\001\002" +
    "\000\006\037\uffc3\044\uffc3\001\002\000\006\037\uffc2\044" +
    "\uffc2\001\002\000\004\005\113\001\002\000\006\037\uffc1" +
    "\044\uffc1\001\002\000\006\034\116\045\117\001\002\000" +
    "\004\037\uffbc\001\002\000\004\045\123\001\002\000\006" +
    "\033\120\034\121\001\002\000\004\046\122\001\002\000" +
    "\004\037\uffb9\001\002\000\004\037\uffba\001\002\000\004" +
    "\037\uffb8\001\002\000\004\046\125\001\002\000\004\044" +
    "\126\001\002\000\006\035\102\045\103\001\002\000\004" +
    "\044\130\001\002\000\006\034\116\045\117\001\002\000" +
    "\004\037\uffbb\001\002\000\004\040\133\001\002\000\024" +
    "\006\036\007\025\011\033\012\032\013\027\016\026\017" +
    "\042\045\043\054\041\001\002\000\030\006\036\007\025" +
    "\011\033\012\032\013\027\015\144\016\026\017\042\041" +
    "\141\045\043\054\041\001\002\000\030\006\ufff2\007\ufff2" +
    "\011\ufff2\012\ufff2\013\ufff2\015\ufff2\016\ufff2\017\ufff2\041" +
    "\ufff2\045\ufff2\054\ufff2\001\002\000\030\006\ufff8\007\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\015\ufff8\016\ufff8\017\ufff8\041" +
    "\ufff8\045\ufff8\054\ufff8\001\002\000\030\006\uffed\007\uffed" +
    "\011\uffed\012\uffed\013\uffed\015\uffed\016\uffed\017\uffed\041" +
    "\uffed\045\uffed\054\uffed\001\002\000\030\006\ufff6\007\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\015\ufff6\016\ufff6\017\ufff6\041" +
    "\ufff6\045\ufff6\054\ufff6\001\002\000\030\006\uffbd\007\uffbd" +
    "\011\uffbd\012\uffbd\013\uffbd\015\uffbd\016\uffbd\017\uffbd\041" +
    "\uffbd\045\uffbd\054\uffbd\001\002\000\030\006\ufff4\007\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4\041" +
    "\ufff4\045\ufff4\054\ufff4\001\002\000\004\015\144\001\002" +
    "\000\004\040\146\001\002\000\030\006\uffef\007\uffef\011" +
    "\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017\uffef\041\uffef" +
    "\045\uffef\054\uffef\001\002\000\024\006\036\007\025\011" +
    "\033\012\032\013\027\016\026\017\042\045\043\054\041" +
    "\001\002\000\030\006\036\007\025\011\033\012\032\013" +
    "\027\015\144\016\026\017\042\041\150\045\043\054\041" +
    "\001\002\000\004\016\151\001\002\000\004\036\152\001" +
    "\002\000\006\035\102\045\103\001\002\000\004\037\154" +
    "\001\002\000\004\044\155\001\002\000\030\006\uffbe\007" +
    "\uffbe\011\uffbe\012\uffbe\013\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\041\uffbe\045\uffbe\054\uffbe\001\002\000\030\006\ufff0\007" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0" +
    "\041\ufff0\045\ufff0\054\ufff0\001\002\000\004\036\175\001" +
    "\002\000\010\045\163\047\161\055\162\001\002\000\004" +
    "\037\172\001\002\000\004\037\167\001\002\000\004\037" +
    "\164\001\002\000\004\044\uffb1\001\002\000\004\044\166" +
    "\001\002\000\030\006\uffb0\007\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\041\uffb0\045\uffb0\054\uffb0" +
    "\001\002\000\004\044\uffb3\001\002\000\004\044\171\001" +
    "\002\000\030\006\uffb2\007\uffb2\011\uffb2\012\uffb2\013\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\041\uffb2\045\uffb2\054\uffb2\001" +
    "\002\000\004\044\uffb5\001\002\000\004\044\174\001\002" +
    "\000\030\006\uffb4\007\uffb4\011\uffb4\012\uffb4\013\uffb4\015" +
    "\uffb4\016\uffb4\017\uffb4\041\uffb4\045\uffb4\054\uffb4\001\002" +
    "\000\004\037\176\001\002\000\004\044\uffb7\001\002\000" +
    "\004\044\200\001\002\000\030\006\uffb6\007\uffb6\011\uffb6" +
    "\012\uffb6\013\uffb6\015\uffb6\016\uffb6\017\uffb6\041\uffb6\045" +
    "\uffb6\054\uffb6\001\002\000\004\041\ufffc\001\002\000\004" +
    "\045\230\001\002\000\012\024\207\033\205\034\206\044" +
    "\uffe6\001\002\000\004\044\227\001\002\000\004\046\225" +
    "\001\002\000\004\044\224\001\002\000\006\045\211\046" +
    "\210\001\002\000\014\025\053\026\052\027\055\030\051" +
    "\044\uffe8\001\002\000\012\025\053\026\052\027\055\030" +
    "\051\001\002\000\004\045\213\001\002\000\004\044\uffe0" +
    "\001\002\000\004\044\215\001\002\000\030\006\uffdf\007" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\041\uffdf\045\uffdf\054\uffdf\001\002\000\004\044\223\001" +
    "\002\000\004\046\220\001\002\000\004\044\uffde\001\002" +
    "\000\004\044\222\001\002\000\030\006\uffdd\007\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\015\uffdd\016\uffdd\017\uffdd\041\uffdd" +
    "\045\uffdd\054\uffdd\001\002\000\030\006\uffe7\007\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\015\uffe7\016\uffe7\017\uffe7\041\uffe7" +
    "\045\uffe7\054\uffe7\001\002\000\030\006\uffe2\007\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\015\uffe2\016\uffe2\017\uffe2\041\uffe2" +
    "\045\uffe2\054\uffe2\001\002\000\004\044\226\001\002\000" +
    "\030\006\uffe9\007\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\041\uffe9\045\uffe9\054\uffe9\001\002\000" +
    "\030\006\uffe5\007\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\041\uffe5\045\uffe5\054\uffe5\001\002\000" +
    "\004\044\231\001\002\000\030\006\uffe1\007\uffe1\011\uffe1" +
    "\012\uffe1\013\uffe1\015\uffe1\016\uffe1\017\uffe1\041\uffe1\045" +
    "\uffe1\054\uffe1\001\002\000\006\024\234\044\uffcd\001\002" +
    "\000\004\044\240\001\002\000\004\047\235\001\002\000" +
    "\004\044\uffd1\001\002\000\004\044\237\001\002\000\030" +
    "\006\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\041\uffd0\045\uffd0\054\uffd0\001\002\000\030" +
    "\006\uffcc\007\uffcc\011\uffcc\012\uffcc\013\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\041\uffcc\045\uffcc\054\uffcc\001\002\000\006" +
    "\024\243\033\242\001\002\000\004\005\253\001\002\000" +
    "\004\005\244\001\002\000\006\005\245\045\246\001\002" +
    "\000\004\044\uffd5\001\002\000\004\005\247\001\002\000" +
    "\004\044\250\001\002\000\030\006\uffd2\007\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\015\uffd2\016\uffd2\017\uffd2\041\uffd2\045" +
    "\uffd2\054\uffd2\001\002\000\004\044\252\001\002\000\030" +
    "\006\uffd4\007\uffd4\011\uffd4\012\uffd4\013\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\041\uffd4\045\uffd4\054\uffd4\001\002\000\006" +
    "\005\254\045\255\001\002\000\004\044\260\001\002\000" +
    "\004\005\256\001\002\000\004\044\257\001\002\000\030" +
    "\006\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\041\uffd3\045\uffd3\054\uffd3\001\002\000\030" +
    "\006\uffd6\007\uffd6\011\uffd6\012\uffd6\013\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\041\uffd6\045\uffd6\054\uffd6\001\002\000\006" +
    "\035\102\045\103\001\002\000\004\037\263\001\002\000" +
    "\004\040\264\001\002\000\024\006\036\007\025\011\033" +
    "\012\032\013\027\016\026\017\042\045\043\054\041\001" +
    "\002\000\030\006\036\007\025\011\033\012\032\013\027" +
    "\015\144\016\026\017\042\041\266\045\043\054\041\001" +
    "\002\000\032\006\uffcb\007\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\014\267\015\uffcb\016\uffcb\017\uffcb\041\uffcb\045\uffcb\054" +
    "\uffcb\001\002\000\004\040\270\001\002\000\024\006\036" +
    "\007\025\011\033\012\032\013\027\016\026\017\042\045" +
    "\043\054\041\001\002\000\030\006\036\007\025\011\033" +
    "\012\032\013\027\015\144\016\026\017\042\041\272\045" +
    "\043\054\041\001\002\000\030\006\uffc0\007\uffc0\011\uffc0" +
    "\012\uffc0\013\uffc0\015\uffc0\016\uffc0\017\uffc0\041\uffc0\045" +
    "\uffc0\054\uffc0\001\002\000\006\035\102\045\103\001\002" +
    "\000\004\037\275\001\002\000\004\040\276\001\002\000" +
    "\024\006\036\007\025\011\033\012\032\013\027\016\026" +
    "\017\042\045\043\054\041\001\002\000\030\006\036\007" +
    "\025\011\033\012\032\013\027\015\144\016\026\017\042" +
    "\041\300\045\043\054\041\001\002\000\030\006\uffbf\007" +
    "\uffbf\011\uffbf\012\uffbf\013\uffbf\015\uffbf\016\uffbf\017\uffbf" +
    "\041\uffbf\045\uffbf\054\uffbf\001\002\000\006\024\303\044" +
    "\uffd8\001\002\000\004\044\311\001\002\000\004\046\304" +
    "\001\002\000\004\010\305\001\002\000\004\046\306\001" +
    "\002\000\004\044\uffdc\001\002\000\004\044\310\001\002" +
    "\000\030\006\uffdb\007\uffdb\011\uffdb\012\uffdb\013\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\041\uffdb\045\uffdb\054\uffdb\001\002" +
    "\000\030\006\uffd7\007\uffd7\011\uffd7\012\uffd7\013\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\041\uffd7\045\uffd7\054\uffd7\001\002" +
    "\000\004\002\ufffd\001\002\000\004\036\314\001\002\000" +
    "\004\037\315\001\002\000\004\040\316\001\002\000\026" +
    "\006\036\007\025\011\033\012\032\013\027\016\026\017" +
    "\042\041\320\045\043\054\041\001\002\000\030\006\036" +
    "\007\025\011\033\012\032\013\027\015\144\016\026\017" +
    "\042\041\321\045\043\054\041\001\002\000\004\041\ufffb" +
    "\001\002\000\004\041\ufffa\001\002\000\004\040\323\001" +
    "\002\000\010\022\016\023\014\041\324\001\002\000\004" +
    "\002\000\001\002\000\004\041\326\001\002\000\004\002" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\036\004\030\006\034" +
    "\007\033\010\023\012\027\017\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\135\006\137\007\141\010\134\011" +
    "\142\012\144\017\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\062\001\001\000\004" +
    "\033\060\001\001\000\004\016\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\126\001\001\000\002" +
    "\001\001\000\004\005\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\133\004\030\006\034\007\033" +
    "\010\023\012\027\017\043\001\001\000\020\004\135\006" +
    "\137\007\141\010\134\011\142\012\144\017\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\146\004\030\006\034\007\033\010\023\012\027" +
    "\017\043\001\001\000\020\004\135\006\137\007\141\010" +
    "\134\011\142\012\144\017\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\216\021\215\001" +
    "\001\000\004\016\211\001\001\000\002\001\001\000\004" +
    "\024\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\261\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\264\004\030\006\034" +
    "\007\033\010\023\012\027\017\043\001\001\000\020\004" +
    "\135\006\137\007\141\010\134\011\142\012\144\017\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\270\004\030\006\034\007\033\010\023\012\027\017\043" +
    "\001\001\000\020\004\135\006\137\007\141\010\134\011" +
    "\142\012\144\017\136\001\001\000\002\001\001\000\004" +
    "\013\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\276\004\030\006\034\007\033\010\023\012\027" +
    "\017\043\001\001\000\020\004\135\006\137\007\141\010" +
    "\134\011\142\012\144\017\136\001\001\000\002\001\001" +
    "\000\004\030\301\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\316\004\030\006\034\007" +
    "\033\010\023\012\027\017\043\001\001\000\020\004\135" +
    "\006\137\007\141\010\134\011\142\012\144\017\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\324\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    TablaSimbolos ta;
    int valido = 1;  
    static boolean seguir = true; 
    Cuadrupla cua;
    int temp = 1;

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IMPRIMIR ::= SP Parentesis_a Identificador Parentesis_c NT$16 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$16 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

        RESULT = toString();
        boolean p = ta.comprobarExistencia(e1.toString());
        if(p){
            Simbolos s1 = TablaSimbolos.busca(e1.toString());
            String textos = s1.getValor();
            cua.imprimirCSalto(textos);
        } else {cua.limpiar(); ta.limpiar(); seguir = false;}
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$16",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IMPRIMIR ::= SP Parentesis_a Texto Parentesis_c NT$15 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$15 ::= 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

        RESULT = a1.toString();
        if(seguir){
        cua.imprimirCSalto(a1.toString());} else {cua.limpiar(); ta.limpiar();}
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$15",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IMPRIMIR ::= SP Parentesis_a Caracter Parentesis_c NT$14 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$14 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

        RESULT = e1.toString().replaceAll("'", "");
        if(seguir){
            cua.imprimirCSalto(e1.toString().replaceAll("'", ""));
        } else {cua.limpiar(); ta.limpiar();}
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$14",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IMPRIMIR ::= SP Println Parentesis_a Parentesis_c NT$13 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$13 ::= 
            {
              Object RESULT =null;

        if(seguir){
            cua.imprimirCSalto("");
        } else {
        cua.limpiar();
        ta.limpiar();
        } 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$13",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERADOR ::= Division 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = op1.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERADOR ::= Multiplicacion 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = op1.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERADOR ::= Resta 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = op1.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERADOR ::= Suma 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = op1.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Char Identificador NT$12 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$12 ::= 
            {
              Object RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        RESULT = i2.toString();
        ta = new TablaSimbolos();
        ta.crearEntrada(i2.toString(), "CHAR");
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$12",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Identificador Igual Caracter NT$11 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$11 ::= 
            {
              Object RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        RESULT = i2.toString();
        ta = new TablaSimbolos();
        ta.setValor(i2.toString(), e2.toString().replaceAll("'", " "));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$11",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Char Identificador Igual Caracter NT$10 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$10 ::= 
            {
              Object RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        RESULT = i2.toString();
        ta = new TablaSimbolos();
        ta.crearEntrada(i2.toString(), "CHAR");
        ta.setValor(i2.toString(), e2.toString().replaceAll("'", " "));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas NT$9 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$9 ::= 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

            RESULT = t1.toString();
        if(seguir){
            ta = new TablaSimbolos();
            seguir = ta.crearEntrada(t1.toString(), "STRING");
            //cua.declarar(t1.);
        } else {cua.limpiar(); ta.limpiar();}
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Float Identificador NT$8 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$8 ::= 
            {
              Object RESULT =null;
		int i3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        RESULT=i3.toString();
        ta = new TablaSimbolos();
        ta.crearEntrada(i3.toString(), "FLOAT");
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Identificador Igual Numero Punto Numero NT$7 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i5left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int i5right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i5 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$7 ::= 
            {
              Object RESULT =null;
		int i5left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int i5right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i5 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        RESULT=i5.toString();
        ta = new TablaSimbolos();
        String numero = n1.toString();
        String decimal = n2.toString();
        String valor = numero + "." + decimal;
        ta.setValor(i5.toString(), valor);  
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Float Identificador Igual Numero Punto Numero NT$6 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$6 ::= 
            {
              Object RESULT =null;
		int i3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        RESULT=i3.toString();
        if(seguir){
            ta = new TablaSimbolos();
            seguir = ta.crearEntrada(i3.toString(), "FLOAT");
            if(seguir){
            String numero = n1.toString();
            String decimal = n2.toString();
            String valor = numero + "." + decimal;
            ta.setValor(i3.toString(), valor);
        }   } else{
            ta.limpiar();
            cua.limpiar();
            seguir = false;
        }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Int Identificador Igual Numero OPERADOR Numero NT$5 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$5 ::= 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        RESULT=a1.toString();
        if(seguir){
        ta = new TablaSimbolos();
        cua.declarar(a1.toString());
            String c = oper.toString();
            String resul = a2.toString() +" "+ c +" " + a3.toString();
            seguir = ta.crearEntrada(a1.toString(), "INTEGER");
            if(seguir){ta.setValor(a1.toString(), resul);
            cua.insertarOperacion(c, "temp"+temp, a2.toString(), a3.toString());
            cua.insertarAsignacion(a1.toString(), "temp"+temp);
            temp ++;}
        } else {
            cua.limpiar();
        } 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Int Identificador Igual Identificador OPERADOR Identificador NT$4 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$4 ::= 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        RESULT=a1.toString();
        if(seguir){
        ta = new TablaSimbolos();
        cua.declarar(a1.toString());
        boolean p1 = ta.comprobarExistencia(a2.toString());
        boolean p2 = ta.comprobarExistencia(a3.toString());
        if(p1 && p2 ){
            seguir = ta.crearEntrada(a1.toString(), "INTEGER");
            boolean p3 = ta.comprobarTipos(a1.toString(), a2.toString(), a3.toString());
            if(p3){
            Simbolos s1 = TablaSimbolos.busca(a2.toString());
            Simbolos s2 = TablaSimbolos.busca(a3.toString());
            String a = s1.getValor(); 
            String b = s2.getValor();
            String c = oper.toString();
            String resul = a +" "+c+" " + b;
            if(seguir){
            ta.setValor(a1.toString(), resul);
            cua.insertarOperacion(c, "temp"+temp, a2.toString(), a3.toString());
            cua.insertarAsignacion(a1.toString(), "temp"+temp);
            temp ++;}
        } else {
            ta.limpiar();
            cua.limpiar();
        }   } else {
            ta.limpiar();
            temp = 1;
            cua.limpiar();
            seguir = false;
        } } else {
            cua.limpiar();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Identificador Igual Numero NT$3 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$3 ::= 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        RESULT=i1.toString();
        if(seguir){
        ta = new TablaSimbolos();
        boolean p = ta.comprobarExistencia(i1.toString());
        if(p){
        ta.setValor(i1.toString(), e1.toString());
        cua.insertarAsignacion(i1.toString(), e1.toString());
        } else{ta.limpiar();
        cua.limpiar();
        seguir = false;}  } else {
        ta.limpiar();
        cua.limpiar();
        seguir = false;
        }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Int Identificador NT$2 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        RESULT=i1.toString();
        if(seguir){
        ta = new TablaSimbolos();
        seguir = ta.crearEntrada(i1.toString(), "INTEGER");
        if(seguir)cua.declarar(i1.toString());
        } else {
        cua.limpiar();
        ta.limpiar();
        seguir = false;
        }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Int Identificador Igual Numero NT$1 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$1 ::= 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        if(seguir){
       
            RESULT=i1.toString();
            ta = new TablaSimbolos();
            seguir = ta.crearEntrada(i1.toString(), "INTEGER");
            if(seguir){
            ta.setValor(i1.toString(), e1.toString());
            cua.insertarAsignacion(i1.toString(), e1.toString());
            }
        } else{
        ta.limpiar();
        cua.limpiar();
        temp = 1;
        seguir = false;
        }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Identificador Igual Identificador OPERADOR Identificador NT$0 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$0 ::= 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

    boolean p = ta.comprobarExistencia(a1.toString());
    boolean p1 = ta.comprobarExistencia(a2.toString());
    boolean p2 = ta.comprobarExistencia(a3.toString());
    if(p && p1 && p2 ){
    RESULT=a1.toString();
        ta = new TablaSimbolos();
        boolean p3 = ta.comprobarTipos(a1.toString(), a2.toString(), a3.toString());
        if(p3){
        Simbolos s1 = TablaSimbolos.busca(a2.toString());
        Simbolos s2 = TablaSimbolos.busca(a3.toString());
        String a = s1.getValor(); 
        String b = s2.getValor();
        String c = oper.toString();
        String resul = a +" "+oper+" " + b;
        ta.setValor(a1.toString(), resul);
        cua.insertarOperacion(c, "temp"+temp, a2.toString(), a3.toString());
        cua.insertarAsignacion(a1.toString(), "temp"+temp);
        temp ++;
    } else {
        ta.limpiar();
        cua.limpiar();
    }   } else {
        ta.limpiar();
        temp = 1;
        cua.limpiar();
        seguir = false;
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= IMPRIMIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA IMPRIMIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // METODO ::= Publico Void Identificador Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // METODO ::= Void Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // METODO ::= Void Identificador Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // METODO ::= Publico Void Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Publico Clase Identificador Llave_a METODO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Clase Identificador Llave_a METODO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Publico Clase Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Clase Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

